<?php

/*
* Get the author name from the path alias.
*/

function getName($which) {
  $pageAlias = drupal_get_path_alias();
  $pieces1 = explode("/", $pageAlias);
  $pieces2 = explode("-", $pieces1[1]);

  if ($which == 'last') {
    if(count($pieces2) > 2){
      $allLastArr = $pieces2;
      array_shift($allLastArr);
      foreach ($allLastArr as $key => $value){
        $allLastArr[$key] = ucfirst($value);
      }
      $last = implode(" ", $allLastArr);
    } else {
      $last = ucfirst($pieces2[1]);
    }
    return $last;
  }
  elseif ($which == 'first') {
    return ucfirst($pieces2[0]);
  }
}

/*
* Convert the json and loop through the array to
* find titles by the author.
*/

function grabTitles() {
  $pubListSrc = "https://s3.amazonaws.com/wriorg/external-publications/externalpubs.json";
  $pubList = file_get_contents($pubListSrc);
  $pubListArray = json_decode($pubList, true);

  $authLast = getName('last');
  $authFirst = getName('first');

  foreach($pubListArray as $key => $publication_entry) {
    $publicationIsFromAuthor = FALSE;
    if ($publication_entry['author']) {
      $authors = array();
      foreach ($publication_entry['author'] as $author) {
        $first_name = $author['given'];
        $last_name = $author['family'];
        $authors[] = $last_name . ' ' . $first_name;
        $feedName = strtr($first_name . ' ' . $last_name, ["á" => "a", "é" => "e", "í" => "i", "ó" => "o", "ú" => "u"]);
        $drupalName = strtr($authFirst . ' ' . $authLast, ["á" => "a", "é" => "e", "í" => "i", "ó" => "o", "ú" => "u"]);
        if ($feedName ===  $drupalName) {
          $publicationIsFromAuthor = TRUE;
        }

      }
    }
    if ($publicationIsFromAuthor) {
      $publication_date = $publication_entry['issued']['date-parts'][0][0] . (isset($publication_entry['issued']['date-parts'][0][1]) ? "-" . $publication_entry['issued']['date-parts'][0][1] : "");
      $publication_date = new DateTime($publication_date);
      $doi = isset($publication_entry['DOI']) ? ' DOI: <a href="https://doi.org/' . $publication_entry['DOI'] . '" target="_blank">' . $publication_entry['DOI'] . '</a>' : "";
      $author_publications_array[] = array(
        'str'  => "<p><strong>\"" . $publication_entry['title'] . ".</strong>\"<br/><small>By " . implode(', ' ,$authors) . ".<br/><em>" . $publication_entry['container-title'] . "</em> " . $publication_entry['volume'] . " (" . $publication_entry['issued']['date-parts'][0][0] . "): " . $publication_entry['page'] . $doi . ".</small></p>",
        'date' => $publication_date->getTimestamp(),
      );
    }
  }


  if ($author_publications_array) {

    usort($author_publications_array, function ($publication1, $publication2) {
      return $publication2['date'] <=> $publication1['date'];
    });

    $matches = implode(' ', array_map(function ($publication) {
      return $publication['str'];
    }, $author_publications_array));
  }
  else {
    $matches = "<p>No external publications listed for: " . $authFirst . " " . $authLast . "</p><style>.pane-wri-external-pub-list-external-publications { display: none !important; } #content .nav--tabs .nav-item:last-child { display: none !important; }</style>";
  }
  return $matches;
}

/**
 * Create the Drupal blocks.
 */

/**
 * Implement hook_block_info().
 */

function wri_external_pub_list_block_info() {
  $blocks = array();
  $blocks['external_publications'] = array(
    'info' => t('External Publications'),
  );
  return $blocks;
}

/**
 * Implement hook_block_view().
 */

function wri_external_pub_list_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'external_publications':
      $block['subject'] = t('List of external publications for author pages');
      $block['title'] = t('External Publications');
      $block['content'] = grabTitles();
      break;
  }
  return $block;
}
